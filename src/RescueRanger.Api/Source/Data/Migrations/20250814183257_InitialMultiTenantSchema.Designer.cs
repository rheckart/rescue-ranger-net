// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RescueRanger.Infrastructure.Data;

#nullable disable

namespace RescueRanger.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250814183257_InitialMultiTenantSchema")]
    partial class InitialMultiTenantSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RescueRanger.Core.Entities.Horse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AdoptionFee")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BehavioralNotes")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("Breed")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CurrentLocation")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("HeightHands")
                        .HasPrecision(4, 1)
                        .HasColumnType("numeric(4,1)");

                    b.Property<bool>("IsAvailableForAdoption")
                        .HasColumnType("boolean");

                    b.Property<string>("MedicalNotes")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("MicrochipNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhotoUrls")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("SpecialNeeds")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("In Care");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("WeightPounds")
                        .HasPrecision(6, 1)
                        .HasColumnType("numeric(6,1)");

                    b.HasKey("Id");

                    b.HasIndex("MicrochipNumber")
                        .HasDatabaseName("IX_Horses_MicrochipNumber");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Horses_TenantId");

                    b.HasIndex("TenantId", "IsAvailableForAdoption")
                        .HasDatabaseName("IX_Horses_TenantId_Available");

                    b.HasIndex("TenantId", "Status")
                        .HasDatabaseName("IX_Horses_TenantId_Status");

                    b.ToTable("Horses", (string)null);
                });

            modelBuilder.Entity("RescueRanger.Core.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ActivatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ApiKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ApiKeyRotatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DatabaseConnectionString")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsSystemTenant")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StorageConnectionString")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Subdomain")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SuspensionReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ContactEmail")
                        .HasDatabaseName("IX_Tenants_ContactEmail");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Tenants_Status");

                    b.HasIndex("Subdomain")
                        .IsUnique()
                        .HasDatabaseName("IX_Tenants_Subdomain");

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("RescueRanger.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PreferencesJson")
                        .HasColumnType("jsonb");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Volunteer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("SecurityStamp")
                        .HasDatabaseName("IX_Users_SecurityStamp");

                    b.HasIndex("TenantId", "Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_TenantId_Email");

                    b.HasIndex("TenantId", "IsActive")
                        .HasDatabaseName("IX_Users_TenantId_IsActive");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("RescueRanger.Core.Entities.Tenant", b =>
                {
                    b.OwnsOne("RescueRanger.Core.ValueObjects.TenantConfiguration", "Configuration", b1 =>
                        {
                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("AdvancedFeaturesEnabled")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(false);

                            b1.Property<string>("FeatureFlags")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.Property<int>("MaxHorses")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(100);

                            b1.Property<int>("MaxUsers")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(10);

                            b1.Property<string>("Metadata")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.Property<int>("StorageLimitMb")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(1024);

                            b1.HasKey("TenantId");

                            b1.ToTable("Tenants");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");

                            b1.OwnsOne("RescueRanger.Core.ValueObjects.BrandingSettings", "Branding", b2 =>
                                {
                                    b2.Property<Guid>("TenantConfigurationTenantId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("CustomCss")
                                        .HasMaxLength(10000)
                                        .HasColumnType("character varying(10000)");

                                    b2.Property<string>("FaviconUrl")
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)");

                                    b2.Property<string>("LogoUrl")
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)");

                                    b2.Property<string>("PrimaryColor")
                                        .IsRequired()
                                        .ValueGeneratedOnAdd()
                                        .HasMaxLength(7)
                                        .HasColumnType("character varying(7)")
                                        .HasDefaultValue("#1976D2");

                                    b2.Property<string>("SecondaryColor")
                                        .IsRequired()
                                        .ValueGeneratedOnAdd()
                                        .HasMaxLength(7)
                                        .HasColumnType("character varying(7)")
                                        .HasDefaultValue("#424242");

                                    b2.HasKey("TenantConfigurationTenantId");

                                    b2.ToTable("Tenants");

                                    b2.WithOwner()
                                        .HasForeignKey("TenantConfigurationTenantId");
                                });

                            b1.Navigation("Branding")
                                .IsRequired();
                        });

                    b.Navigation("Configuration")
                        .IsRequired();
                });

            modelBuilder.Entity("RescueRanger.Core.Entities.User", b =>
                {
                    b.OwnsMany("RescueRanger.Core.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Token")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("CreatedByIp")
                                .HasMaxLength(45)
                                .HasColumnType("character varying(45)");

                            b1.Property<DateTime>("ExpiresAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ReplacedByToken")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<DateTime?>("RevokedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("RevokedByIp")
                                .HasMaxLength(45)
                                .HasColumnType("character varying(45)");

                            b1.HasKey("UserId", "Token");

                            b1.ToTable("UserRefreshTokens", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
